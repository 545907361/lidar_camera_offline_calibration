/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __TRANSFORM_hpp__
#define __TRANSFORM_hpp__

#include "HEADER.hpp"


class TRANSFORM
{
    public:
        HEADER     stHeader;

        uint8_t    bReseted;

        int8_t     a;

        int64_t    nINSTimeStamp;

        float      gfTransformVehicle2World[4][4];

        float      gfVehiclePoseInWorld[6];

        float      gfTransformVelodyne2Vehicle[4][4];

        float      gfVelodynePoseInVehicle[6];

        float      gfTransformMobileye2Vehicle[4][4];

        float      gfMobileyePoseInVehicle[6];

        float      gfTransformFrontLux2Vehicle[4][4];

        float      gfFrontLuxPoseInVehicle[6];

        float      gfTransformLeftLux2Vehicle[4][4];

        float      gfLeftLuxPoseInVehicle[6];

        float      gfTransformBackLux2Vehicle[4][4];

        float      gfBackLuxPoseInVehicle[6];

        float      gfTransformRightLux2Vehicle[4][4];

        float      gfRightLuxPoseInVehicle[6];

        float      gfTransformIBEO2Vehicle[4][4];

        float      gfIBEOPoseInVehicle[6];

        float      gfTransformMwrFront2Vehicle[4][4];

        float      gfMwrFrontPoseInVehicle[6];

        float      gfTransformMwrFrontLeft2Vehicle[4][4];

        float      gfMwrFrontLeftPoseInVehicle[6];

        float      gfTransformMwrFrontRight2Vehicle[4][4];

        float      gfMwrFrontRightPoseInVehicle[6];

        float      gfTransformMwrRearLeft2Vehicle[4][4];

        float      gfMwrRearLeftPoseInVehicle[6];

        float      gfTransformMwrRearRight2Vehicle[4][4];

        float      gfMwrRearRightPoseInVehicle[6];

        float      gfTransformMwrRear2Vehicle[4][4];

        float      gfMwrRearPoseInVehicle[6];

        float      gfVehicleVelocityInWorld[3];

        int8_t     bVCUDRValid;

        float      gfTransformVehicle2WorldVCUDR[4][4];

        float      gfVehiclePoseInWorldVCUDR[6];

        float      gfVehicleVelocityInWorldVCUDR[3];

        float      gfCenterLidarPoseInVehicle[6];

        float      gfTransformCenterLidar2Vehicle[4][4];

        float      gfLeftRSLidarPoseInVehicle[6];

        float      gfTransformLeftRSLidar2Vehicle[4][4];

        float      gfRightRSLidarPoseInVehicle[6];

        float      gfTransformRightRSLidar2Vehicle[4][4];

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "TRANSFORM"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int TRANSFORM::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int TRANSFORM::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int TRANSFORM::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t TRANSFORM::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* TRANSFORM::getTypeName()
{
    return "TRANSFORM";
}

int TRANSFORM::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = this->stHeader._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->bReseted, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->a, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->nINSTimeStamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformVehicle2World[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfVehiclePoseInWorld[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformVelodyne2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfVelodynePoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMobileye2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfMobileyePoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformFrontLux2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfFrontLuxPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformLeftLux2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfLeftLuxPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformBackLux2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfBackLuxPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformRightLux2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfRightLuxPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformIBEO2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfIBEOPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrFront2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfMwrFrontPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrFrontLeft2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfMwrFrontLeftPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrFrontRight2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfMwrFrontRightPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrRearLeft2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfMwrRearLeftPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrRearRight2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfMwrRearRightPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrRear2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfMwrRearPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfVehicleVelocityInWorld[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->bVCUDRValid, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformVehicle2WorldVCUDR[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfVehiclePoseInWorldVCUDR[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfVehicleVelocityInWorldVCUDR[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfCenterLidarPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformCenterLidar2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfLeftRSLidarPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformLeftRSLidar2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfRightRSLidarPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfTransformRightRSLidar2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int TRANSFORM::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = this->stHeader._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->bReseted, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->a, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->nINSTimeStamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformVehicle2World[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfVehiclePoseInWorld[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformVelodyne2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfVelodynePoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMobileye2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfMobileyePoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformFrontLux2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfFrontLuxPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformLeftLux2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfLeftLuxPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformBackLux2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfBackLuxPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformRightLux2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfRightLuxPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformIBEO2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfIBEOPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrFront2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfMwrFrontPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrFrontLeft2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfMwrFrontLeftPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrFrontRight2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfMwrFrontRightPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrRearLeft2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfMwrRearLeftPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrRearRight2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfMwrRearRightPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformMwrRear2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfMwrRearPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfVehicleVelocityInWorld[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->bVCUDRValid, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformVehicle2WorldVCUDR[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfVehiclePoseInWorldVCUDR[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfVehicleVelocityInWorldVCUDR[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfCenterLidarPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformCenterLidar2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfLeftRSLidarPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformLeftRSLidar2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfRightRSLidarPoseInVehicle[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 4; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfTransformRightRSLidar2Vehicle[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int TRANSFORM::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->stHeader._getEncodedSizeNoHash();
    enc_size += __byte_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += __float_encoded_array_size(NULL, 3);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += __float_encoded_array_size(NULL, 3);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    enc_size += __float_encoded_array_size(NULL, 6);
    enc_size += 4 * __float_encoded_array_size(NULL, 4);
    return enc_size;
}

uint64_t TRANSFORM::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == TRANSFORM::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)TRANSFORM::getHash };

    uint64_t hash = 0x04aa52840d883ba4LL +
         HEADER::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
